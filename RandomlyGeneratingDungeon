import greenfoot.*;
import java.util.List;

public class RandomlyGeneratingDungeon extends World {    
     public static int lives;
     static int currentRoom = 1;
     static int previousRoom = 1;
     
         
    public RandomlyGeneratingDungeon() {    
        // Create a new world with 600x400 cells with a cell size of 1x1 pixels.
        super(680, 480, 1, false); 
        lives = 10;
        addObject (new Hearts (), 30, 30);
        addObject(new Link(),getWidth()/2,getHeight()/2+20);
        addObject(new FadeOverlay(),getWidth()/2,getHeight()/2);
        addObject(new Rooms(),getWidth()/2,getHeight()/2);
        
        drawRoom(Rooms.lockedRoom, 0, 4);
        drawRoom(Rooms.frontLawn, 1, 4);
        drawRoom(Rooms.offProperty, 2, 4);
        drawRoom(Rooms.room, 0, 3);
        drawRoom(Rooms.hall, 1, 3);
        drawRoom(Rooms.ghostRoom, 2, 3);
        drawRoom(Rooms.kitchen, 0, 2);
        drawRoom(Rooms.diningRoom, 1, 2);
        drawRoom(Rooms.stairs, 2, 2);
        drawRoom(Rooms.garden, 0, 1);
        drawRoom(Rooms.study, 1, 1);
        drawRoom(Rooms.CoralinesRoom, 2, 1);
        drawRoom(Rooms.boss, 2, 0);
        placeBlocks();
        paintOrder();
}

    public void drawRoom(String room, int x, int y) {      
        x=x-1;
        y=y-4;
        for (int i =0; i < (17*12); i++){
            int row = (int)i/17;
            int col = i%17;
            int xPos = (x*17*40)+col*40+20;
            int yPos = (12*y*40)+row*40+20;

            if (room.charAt(i) == 'W'){
                addObject(new Wall(40,40),xPos,yPos);
            } else if (room.charAt(i) == 'l'){
                addObject(new Lava(),xPos,yPos);
            } else if (room.charAt(i) == 'w'){
                addObject(new Water(),xPos,yPos);
            } else if (room.charAt(i) == 'p'){
                addObject(new PoisonOak(),xPos,yPos);
            } else if (room.charAt(i) == 'D'){
                addObject(new Doll(), xPos, yPos);
            } else if(room.charAt(i) == 'O'){
                addObject(new WishingWell(),xPos,yPos);
            } else if(room.charAt(i) == 'b'){
                addObject(new Block(false,0,-1),xPos,yPos);
            } else if(room.charAt(i) == 'd'){
                addObject(new Door(), xPos, yPos);
            }
    }
    }
    
    
   
    public static void displayMessage (String t){
        //showText(t,0,300);
    }
    
    public void placeBlocks(){
        block(0,0);
        block(4,6,true,-1);
        block(3,6,true,1,2);
        block(5,6);
        block(4,8);
        block(4,4);
        for (int i= 0; i < 4; i++){
            block(i+13,4);
        }
        block(12,4,true,1,4);
        block(12,3,true);
        block(12,2,true, -1);
        block(12,1,true);
        block(16,1);
        block(16,2);
        block(16,3);
    }

    
    Class[] all = {Wall.class,Key.class,Block.class,Lava.class,Water.class, PoisonOak.class, Doll.class, Door.class};
    public void scroll(String direction){
        int v=0;
        int h=0;
        if (direction.equals("left"))h=getWidth();
        if (direction.equals("right"))h=-getWidth();
        if (direction.equals("up"))v=getHeight();
        if (direction.equals("down"))v=-getHeight();
        int a=0;
        while (a<all.length){
            List object = getObjects(all[a]);
            if (! object.isEmpty()){
                for (int i=0; i<object.size(); i++){
                    Actor Object = (Actor) object.get(i);
                    Object.setLocation(Object.getX()+h,Object.getY()+v);
                }
            }
            a++;
        }
    }

    public void paintOrder(){
        setPaintOrder(Skull.class, FadeOverlay.class,Link.class,Hearts.class,
                        Wall.class,Door.class,Key.class,Block.class,Lava.class,Water.class, 
                            PoisonOak.class);
    }

    public void act(){
        paintOrder();
        if (tileSet==0)setBackground(new GreenfootImage("HardwoodTile.png"));
        if (tileSet==1)setBackground(new GreenfootImage("BlueTile.png"));
        if (tileSet==2)setBackground(new GreenfootImage("AquaTile.png"));
        if (tileSet==3)setBackground(new GreenfootImage("YellowTile.png"));
        if (tileSet==4)setBackground(new GreenfootImage("GreyTile.png"));
        if (RandomlyGeneratingDungeon.lives <= 0){
            addObject(new Skull (), 350, 300);
        }
        
    }

    /**
    Tile Sets
    ---------
    0 = Green
    1 = Blue
    2 = Aqua
    3 = Yellow
    4 = Grey
     */
    int tileSet = 0;
    public void changetileSet(int i){
        tileSet=i;
    }

    //Dungeon Manipulation methods

    

    public void generateDungeonRoom(){

    }

    public void clearDungeonRoom(){
        Class[] objects = {Block.class,Wall.class}; //List of objects that will be cleared
        int object = 0;
        int i = 0;
        while (object<objects.length){
            List Object = getObjects(objects[object]);
            if (! Object.isEmpty() && (Actor) Object.get(0)!=null){
                while (i<Object.size()){
                    removeObject((Actor) Object.get(i));
                    i++;
                }
            }
            object++;
            i=0;
        }
    }

    public void generateDungeonEnemies(){

    }

    //Dungeon Tile Methods

    public void block(int x, int y, boolean movable, int event, int keypos){
        if (x*40+20<0||x*40+20>getWidth()||getHeight()-y*40-20<0||getHeight()-y*40-20>getHeight()){
            System.out.println("ERROR: BLOCK AT ("+x+","+y+") IS OUT OF WORLD RANGE"); 
            return;
        }
        addObject(new Block(movable,event,keypos),x*40+20,getHeight()-y*40-20);
    }

    public void block(int x, int y, boolean movable, int event){
        if (x*40+20<0||x*40+20>getWidth()||getHeight()-y*40-20<0||getHeight()-y*40-20>getHeight()){
            System.out.println("ERROR: BLOCK AT ("+x+","+y+") IS OUT OF WORLD RANGE"); 
            return;
        }
        addObject(new Block(movable,event,-1),x*40+20,getHeight()-y*40-20);
    }

    public void block(int x, int y, boolean movable){
        if (x*40+20<0||x*40+20>getWidth()||getHeight()-y*40-20<0||getHeight()-y*40-20>getHeight()){
            System.out.println("ERROR: BLOCK AT ("+x+","+y+") IS OUT OF WORLD RANGE"); 
            return;
        }
        addObject(new Block(movable,0,-1),x*40+20,getHeight()-y*40-20);
    }

    public void block(int x, int y){
        if (x*40+20<0||x*40+20>getWidth()||getHeight()-y*40-20<0||getHeight()-y*40-20>getHeight()){
            System.out.println("ERROR: BLOCK AT ("+x+","+y+") IS OUT OF WORLD RANGE"); 
            return;
        }
        addObject(new Block(false,0,-1),x*40+20,getHeight()-y*40-20);
    }
    //Liquids
    public void lava(int x, int y){
        if (x*40+20<0||x*40+20>getWidth()||getHeight()-y*40-20<0||getHeight()-y*40-20>getHeight()){
            System.out.println("ERROR: LAVA AT ("+x+","+y+") IS OUT OF WORLD RANGE"); 
            return;
        }
        addObject(new Lava(),x*40+20,getHeight()-y*40-20);
    }

    public void water(int x, int y){
        if (x*40+20<0||x*40+20>getWidth()||getHeight()-y*40-20<0||getHeight()-y*40-20>getHeight()){
            System.out.println("ERROR: WATER AT ("+x+","+y+") IS OUT OF WORLD RANGE"); 
            return;
        }
        addObject(new Water(),x*40+20,getHeight()-y*40-20);
    }
}
